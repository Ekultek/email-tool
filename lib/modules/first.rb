# A tutorial for new users, it will take them through a list of possible flags and teach them how to call each flag
# and what the correct command looks like.

module FirstTime

  class Tutorial

    def initialize(score)
      @score = score
    end

    def welcome_screen
      system('cls')
      puts
      "----
    Welcome to the tutorial, here you will learn
    all about the flags and what they do.
    
    To begin please choose from one of the options
    below:
    
      * Help Flag      [1]
      * Example Flag   [2]
      * Version Flag   [3]
      * Test Flag      [4]
      * Type Flag      [5]
      * Exit Tut       [6]
      
   To choose a flag, type in the name that's in the 
   brackets."
    end

    def help_flag
      puts <<-_END_
    ----
    The help flag is a basic flag that will allow you
    to see the basic help of the program. So what that
    means is it will tell you, what flag takes what
    argument, and how many dashes (-) a flag takes to
    run successfully.
    
    This flag looks like this:
      ruby gen_email.rb --help
    
    This is a command. Anything after a dash
    is a command.
    
    What this command will do is run the help
    flag and brings up the help menu, this menu
    has basic syntax of the program, and the 
    arguments required to make the command 
    launch successfully.
    
    If you fail to run a flag, or run an incorrect flag,
    the program will default to the help menu, this will
    also bring up the readme.md file. This file has a list
    of all the flags and their uses.
    
    Go ahead and try type in the command:
      _END_
      print 'Enter command: '
      command = gets.chomp

      if command == 'ruby gen_email.rb --help'
        puts "\e[32mSUCCESS, you created the help flag! Exit the file to continue..\e[0m"
        system('ruby gen_email.rb --help')
        puts "\e[32mWhat you just saw was the help menu.. Press enter to continue..\e[0m"
        gets.chomp
        system('cls')
        flag_choices
      else
        FORMAT.err('Invalid... Try again')
        sleep(2)
        @score -= 4.79
        system('cls')
        help_flag
      end
    end

    def examples_flag
      puts <<-_END_
    ----
    
    The examples flag is a command that will provide you
    with an example email generated by this program.
    
    the command will have the following:
      * A random ticket number
      * A random issue
      * A random name
      * A random 'resolution' to the issue
    
    This command looks like this:
      ruby gen_email.rb --example
      
    When that command is run it will output an example of
    an email (you might like what you see so run it a couple time)
    
    Go ahead and type in the examples command:  
      _END_
      print 'Enter examples command: '
      examples = gets.chomp

      if examples == 'ruby gen_email.rb --example'
        puts "\e[32mSUCCESS!! You successfully ran the example flag."
        system('ruby gen_email.rb --example')
        puts "What you see here, is an example email generated by this program, press enter to continue..\e[0m"
        gets.chomp
        system('cls')
        flag_choices
      else
        puts FORMAT.err(":/ that doesn't look right, try it again..")
        sleep(2)
        @score -= 6.12
        system('cls')
        examples_flag
      end
    end

    def type_flag
      puts <<-_END_
    The type flag is the only flag that will take an
    argument. This flag will take the following email
    types as an argument (if I'm missing an email type
    go to the text_files directory and fill out the
    suggestions.txt and send it to me):
    
      * osha     -> OSHA Regional email
      * pend     -> Pending email
      * 60       -> Account deletion email
      * generic  -> Generic email
      * resolve  -> Resolution email
      * esc      -> Escalation email
      * pii      -> PII removal email
      * vip      -> VIP email
      * inop     -> IN-OP email
      * dev      -> Creates a email to
                    unlock or reset dev
                    accounts. You must
                    specify what type by
                    doing the following:
                    -t dev=unlock
                    or
                    -t dev=reset
      
    These emails are generated and copied to the your
    clipboard, from there you push CNTRL-C in order to 
    paste the email. 
    
    In case you overwrite you clipboard, I have a fix!
    There is also an email located inside of the 
    ./lib/tools/tmp/email_to_copy file. The last email you
    created will be located inside of that file. There
    is no logging, or caching of the information passed
    through this program. That file is the only way to
    save your email, and will be overwritten the next time
    you use the program.
    
    The full command of the email flag looks like this:
      ruby gen_email.rb -t <type-of-email>
      
   The type of email must be taken from the list above.
   
   Go ahead and try to run the flag, try to make a
   generic email remember that in order to make an
   email you have to specify what type with the -t
   flag. So to make a generic it would look
   something like this:

   ruby gen_email.rb -t generic

   Go ahead and give it a shot:
      _END_
      print 'Enter command: '
      email = gets.chomp

      if email == 'ruby gen_email.rb -t generic'
        puts "\e[32mSUCCESS! You have successfully used the email flag.\e[0m"
        system('ruby gen_email.rb -t generic')
        puts "\e[32mWhat you just did was create a generic email, press CNTRL-C to paste it\e[0m"
        puts "\e[32mPress enter to continue..\e[0m"
        gets.chomp
        system('cls')
        flag_choices
      else
        FORMAT.err("That isn't right, try it again")
        sleep(2)
        @score -= 25
        system('cls')
        type_flag
      end
    end

    def version_flag
      puts <<-_END_
    The version flag will show the current version
    that the program is in. It's pretty self explanatory.
    The version is changed depending on what the latest
    release has accomplished.
    
    * The first number shows a major change to the program
    * The second number is used to build up to the first
      number IE: 1.9 the next version will be 2.0
    * The third number shows a minor change, comments added,
      grammar fixed, etc..
    * The final number shows the patch version, so if there
      was an issue, and the issue was patched without fixing
      anything major, the fourth number will be changed.
      
    All numbers go up. Never down.    
    
    The command looks like this:
      ruby gen_email.rb --version
      
    Go ahead and try to type the command in..  
      _END_
      print 'Enter command: '
      ver = gets.chomp

      if ver == 'ruby gen_email.rb --version'
        puts "\e[32mSUCCESS!!! You made a version flag\e[0m"
        system('ruby gen_email.rb --version')
        puts "\e[32mWhat you just saw was the version the program is in. Press enter to continue..\e[0m"
        gets.chomp
        system('cls')
        flag_choices
      else
        FORMAT.err('That\'s not right.. Try again')
        sleep(2)
        @score -= 3
        system('cls')
        version_flag
      end
    end


    def test_flag
      puts <<-_END_
    The test flag will run a series of tests on all the 
    modules this program uses.
    
    The date:
    #{SKIPDAY.date}
    
    The time:
    #{CHECKTIME.check_time}
    
    etc..
    
    How this flag works is when run it compares
    against itself and the computer to verify
    that everything is working. If everything works
    it will say 'PASSED' if it doesn't it will
    say 'FAILED'.
    
    If you happened to get a failed message while
    running this flag, please copy the error that
    will appear at the bottom of the screen and send it
    with the text file contained in the text_files 
    directory labeled issues.
    
    The command for this flag looks like this:
      ruby gen_email.rb --test
      
    Go ahead and run a test on this program:  
      _END_

      print 'Enter command: '
      test = gets.chomp

      if test == 'ruby gen_email.rb --test'
        puts "\e[32mSUCCESS!! You ran the test flag!\e[0m"
        system('ruby gen_email.rb --test')
        puts "\e[32mWhat you just saw was a test being run on the program. Press enter to continue..\e[0m"
        gets.chomp
        system('cls')
        flag_choices
      else
        FORMAT.err("That doesn't look right.. :/ try again..")
        @score -= 7.8
        system('cls')
        test_flag
      end
    end

    def flag_choices
      puts welcome_screen
      print 'Enter name of flag: '
      flag = gets.chomp.to_i
      system('cls')

      def calc_grade
        if @score >= 70
          "\e[32mA\e[0m"
        elsif @score < 70 && @score > 60
          "\e[32mB\e[0m"
        elsif @score < 60 && @score > 40
          "\e[33mC\e[0m"
        elsif @score < 40 && @score > 20
          "\e[30mD\e[0m"
        else
          "\e[31mF\e[0m"
        end
      end

      case flag
        when 1
          help_flag
        when 2
          examples_flag
        when 3
          version_flag
        when 4
          test_flag
        when 5
          type_flag
        when 6
          require 'etc'
          user = Etc.getlogin
          readme_path = "C:/Users/#{user}/Desktop/email/readme.md"
          FORMAT.info('Thank you for going through the tutorial.')
          FORMAT.info("Your grade: #{calc_grade}")
          FORMAT.info("Your score: #{@score}")
          FORMAT.info('Remember, you can always look at the readme file,
           it has been opened for you, close the file to pickup
           where you left off.')
          system("notepad.exe #{readme_path}")
          system('cls')
          exit(1)
        else
          FORMAT.err('Invalid flag, try again')
          sleep(2)
          flag_choices
      end
    end

  end

end